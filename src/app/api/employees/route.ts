import { NextRequest, NextResponse } from 'next/server'
import { supabase } from '@/lib/supabase'

// GET - Listar funcion√°rios de uma empresa
export async function GET(request: NextRequest) {
    try {
        const { searchParams } = new URL(request.url)
        const companyId = searchParams.get('company_id')

        if (!companyId) {
            return NextResponse.json(
                { error: 'company_id √© obrigat√≥rio' },
                { status: 400 }
            )
        }

        const { data: employees, error } = await supabase
            .from('employees')
            .select(`
                *,
                company:companies(name),
                manager:managers(name, email)
            `)
            .eq('company_id', companyId)
            .order('created_at', { ascending: false })

        if (error) {
            console.error('Erro ao buscar funcion√°rios:', error)
            return NextResponse.json(
                { error: 'Erro ao buscar funcion√°rios' },
                { status: 500 }
            )
        }

        return NextResponse.json({
            success: true,
            employees: employees || []
        })

    } catch (error) {
        console.error('Erro interno:', error)
        return NextResponse.json(
            { error: 'Erro interno do servidor' },
            { status: 500 }
        )
    }
}

// POST - Adicionar novo funcion√°rio
export async function POST(request: NextRequest) {
    try {
        const body = await request.json()

        const {
            company_id,
            manager_id,
            name,
            email,
            full_name,
            cpf,
            birth_date,
            whatsapp
        } = body

        // Se √© auto-cadastro (sem manager_id), buscar o manager da empresa
        let finalManagerId = manager_id
        if (!manager_id && company_id) {
            // Buscar o manager atrav√©s da tabela managers filtrado por company_id
            const { data: manager } = await supabase
                .from('managers')
                .select('id')
                .eq('company_id', company_id)
                .single()

            if (manager) {
                finalManagerId = manager.id
            }
        }

        // Usar full_name se fornecido, sen√£o usar name
        const finalName = full_name || name

        // Valida√ß√µes
        if (!company_id || !finalManagerId || !finalName || !email) {
            return NextResponse.json(
                { error: 'Campos obrigat√≥rios: company_id, name/full_name, email' },
                { status: 400 }
            )
        }

        // Verificar se email j√° existe na empresa
        const { data: existingEmployee } = await supabase
            .from('employees')
            .select('id')
            .eq('company_id', company_id)
            .eq('email', email)
            .single()

        if (existingEmployee) {
            return NextResponse.json(
                { error: 'Funcion√°rio com este e-mail j√° existe nesta empresa' },
                { status: 409 }
            )
        }

        // Criar funcion√°rio
        const employeeData: any = {
            company_id,
            manager_id: finalManagerId,
            name: finalName,
            email,
            invited_at: new Date().toISOString()
        }

        // Adicionar campos opcionais se fornecidos
        if (cpf) {
            // Salvar CPF apenas com n√∫meros (limpo)
            employeeData.cpf = cpf.replace(/\D/g, '')
        }
        if (birth_date) employeeData.birth_date = birth_date
        if (whatsapp) employeeData.whatsapp = whatsapp
        if (full_name) employeeData.full_name = full_name

        const { data: employee, error } = await supabase
            .from('employees')
            .insert(employeeData)
            .select()
            .single()

        if (error) {
            console.error('Erro ao criar funcion√°rio:', error)
            return NextResponse.json(
                { error: 'Erro ao criar funcion√°rio' },
                { status: 500 }
            )
        }

        return NextResponse.json({
            success: true,
            employee
        })

    } catch (error) {
        console.error('Erro interno:', error)
        return NextResponse.json(
            { error: 'Erro interno do servidor' },
            { status: 500 }
        )
    }
}

// DELETE - Excluir funcion√°rio
export async function DELETE(request: NextRequest) {
    try {
        const { searchParams } = new URL(request.url)
        const employeeId = searchParams.get('employee_id')

        console.log('üóëÔ∏è [API Delete] Recebida requisi√ß√£o para excluir funcion√°rio:', employeeId)

        if (!employeeId) {
            console.error('‚ùå [API Delete] employee_id n√£o fornecido')
            return NextResponse.json(
                { error: 'employee_id √© obrigat√≥rio' },
                { status: 400 }
            )
        }

        // Verificar se funcion√°rio existe
        console.log('üîç [API Delete] Verificando se funcion√°rio existe...')
        const { data: employee, error: fetchError } = await supabase
            .from('employees')
            .select('id, name, full_name')
            .eq('id', employeeId)
            .single()

        if (fetchError) {
            console.error('‚ùå [API Delete] Erro ao buscar funcion√°rio:', fetchError)
            return NextResponse.json(
                { error: 'Erro ao buscar funcion√°rio' },
                { status: 500 }
            )
        }

        if (!employee) {
            console.error('‚ùå [API Delete] Funcion√°rio n√£o encontrado:', employeeId)
            return NextResponse.json(
                { error: 'Funcion√°rio n√£o encontrado' },
                { status: 404 }
            )
        }

        console.log('‚úÖ [API Delete] Funcion√°rio encontrado:', employee.name || employee.full_name)

        // Excluir funcion√°rio (CASCADE vai excluir progresso automaticamente)
        console.log('üóëÔ∏è [API Delete] Executando exclus√£o...')
        const { error } = await supabase
            .from('employees')
            .delete()
            .eq('id', employeeId)

        if (error) {
            console.error('‚ùå [API Delete] Erro ao excluir funcion√°rio:', error)
            return NextResponse.json(
                { error: 'Erro ao excluir funcion√°rio: ' + error.message },
                { status: 500 }
            )
        }

        console.log('‚úÖ [API Delete] Funcion√°rio exclu√≠do com sucesso!')
        return NextResponse.json({
            success: true,
            message: `Funcion√°rio ${employee.name || employee.full_name} exclu√≠do com sucesso`
        })

    } catch (error) {
        console.error('Erro interno:', error)
        return NextResponse.json(
            { error: 'Erro interno do servidor' },
            { status: 500 }
        )
    }
}
