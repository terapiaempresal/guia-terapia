// Teste completo das funcionalidades de v√≠deo
const testVideoFeatures = async () => {
    try {
        console.log('üß™ Testando funcionalidades de v√≠deo...')

        const managerId = localStorage.getItem('userId')
        const companyData = localStorage.getItem('company')
        const company = companyData ? JSON.parse(companyData) : null

        if (!managerId || !company?.id) {
            console.log('‚ùå Dados do gestor n√£o encontrados')
            return
        }

        console.log('üë§ Manager ID:', managerId)
        console.log('üè¢ Company ID:', company.id)

        // 1. Testar busca de v√≠deos com filtro
        console.log('üì° Testando busca de v√≠deos...')
        const response = await fetch(`/api/videos/management?company_id=${company.id}`)
        const data = await response.json()

        if (data.success) {
            console.log(`üì∫ Total de v√≠deos: ${data.videos?.length || 0}`)

            const systemVideos = data.videos?.filter(v => v.created_by_type === 'system') || []
            const managerVideos = data.videos?.filter(v => v.created_by_type === 'manager') || []

            console.log(`üîí V√≠deos do sistema: ${systemVideos.length}`)
            console.log(`üè¢ V√≠deos da empresa: ${managerVideos.length}`)

            // Mostrar v√≠deos da empresa
            if (managerVideos.length > 0) {
                console.log('üìã V√≠deos da empresa:')
                managerVideos.forEach((video, i) => {
                    console.log(`${i + 1}. "${video.title}" - Order: ${video.display_order} - Company: ${video.company_id}`)
                })
            }

            // Verificar se algum v√≠deo da empresa tem company_id correto
            const correctOwnership = managerVideos.filter(v => v.company_id === company.id)
            console.log(`‚úÖ V√≠deos com ownership correto: ${correctOwnership.length}`)

            if (correctOwnership.length !== managerVideos.length) {
                console.log('‚ö†Ô∏è Alguns v√≠deos da empresa n√£o t√™m company_id correto')
            }

        } else {
            console.log('‚ùå Erro ao buscar v√≠deos:', data.error)
        }

        // 2. Testar cria√ß√£o de v√≠deo de teste
        console.log('üì§ Testando cria√ß√£o de v√≠deo...')
        const testVideo = {
            title: 'Teste Ownership - ' + new Date().toLocaleTimeString(),
            description: 'V√≠deo de teste para verificar ownership',
            youtube_url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
            type: 'youtube',
            manager_id: managerId,
            company_id: company.id
        }

        const createResponse = await fetch('/api/videos/management', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(testVideo)
        })

        const createData = await createResponse.json()

        if (createData.success) {
            console.log('‚úÖ V√≠deo criado com sucesso!')
            console.log('üìπ Dados do v√≠deo:', {
                id: createData.video.id,
                title: createData.video.title,
                created_by_type: createData.video.created_by_type,
                company_id: createData.video.company_id,
                manager_id: createData.video.manager_id
            })

            // Verificar se foi criado corretamente
            if (createData.video.created_by_type === 'manager' &&
                createData.video.company_id === company.id) {
                console.log('üéØ SUCESSO: V√≠deo criado com ownership correto!')
            } else {
                console.log('‚ùå PROBLEMA: Ownership incorreto no v√≠deo criado')
            }

        } else {
            console.log('‚ùå Erro ao criar v√≠deo:', createData.error)
        }

    } catch (error) {
        console.error('‚ùå Erro no teste:', error)
    }
}

// Execute o teste
testVideoFeatures()