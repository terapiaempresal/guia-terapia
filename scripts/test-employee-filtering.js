// Teste para verificar se funcion√°rios arquivados n√£o aparecem na lista principal
const testEmployeeFiltering = async () => {
    try {
        console.log('üß™ Testando filtragem de funcion√°rios...')

        const managerId = localStorage.getItem('userId')
        if (!managerId) {
            console.log('‚ùå Manager ID n√£o encontrado')
            return
        }

        console.log('üë§ Manager ID:', managerId)

        // Testar lista principal (sem arquivados)
        console.log('üì° Buscando funcion√°rios ativos...')
        const responseActive = await fetch(`/api/employees?manager_id=${managerId}`)
        const dataActive = await responseActive.json()

        console.log(`üë• Funcion√°rios ativos: ${dataActive.employees?.length || 0}`)
        dataActive.employees?.forEach((emp, i) => {
            console.log(`${i + 1}. ${emp.name || emp.full_name} - Arquivado: ${emp.archived}`)
        })

        // Testar lista de arquivados
        console.log('üì° Buscando funcion√°rios arquivados...')
        const responseArchived = await fetch(`/api/employees?manager_id=${managerId}&archived_only=true`)
        const dataArchived = await responseArchived.json()

        console.log(`üóÑÔ∏è Funcion√°rios arquivados: ${dataArchived.employees?.length || 0}`)
        dataArchived.employees?.forEach((emp, i) => {
            console.log(`${i + 1}. ${emp.name || emp.full_name} - Arquivado: ${emp.archived}`)
        })

        // Verificar se algum ativo est√° marcado como arquivado
        const archivedInActiveList = dataActive.employees?.filter(emp => emp.archived)
        if (archivedInActiveList?.length > 0) {
            console.log('‚ùå PROBLEMA: Funcion√°rios arquivados na lista ativa:', archivedInActiveList)
        } else {
            console.log('‚úÖ SUCESSO: Nenhum funcion√°rio arquivado na lista ativa')
        }

    } catch (error) {
        console.error('‚ùå Erro no teste:', error)
    }
}

// Execute o teste
testEmployeeFiltering()